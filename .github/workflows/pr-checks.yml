name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Check for changes to determine which jobs to run
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          frontend:
            - 'frontend/**'
          backend:
            - 'backend-fastapi/**'

  # Frontend checks
  frontend-checks:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Check formatting
      run: npm run format:check || true
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type checking
      run: npm run type-check || npx tsc --noEmit
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Build application
      run: npm run build

  # Backend checks
  backend-checks:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend-fastapi
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: backend-fastapi/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Check formatting
      run: poetry run black --check .
    
    - name: Run linter
      run: poetry run flake8 .
    
    - name: Run type checking
      run: poetry run mypy . || true
    
    - name: Run tests
      run: poetry run pytest --cov=./ --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./backend-fastapi/coverage.xml
        flags: backend

  # Security checks
  security-checks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}